/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.ViewsCheckOption
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.ViewsIsUpdatable
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.ViewsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row10
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Views(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ViewsRecord>?,
    aliased: Table<ViewsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ViewsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.VIEWS</code>
         */
        val VIEWS: Views = Views()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ViewsRecord> = ViewsRecord::class.java

    /**
     * The column <code>information_schema.VIEWS.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<ViewsRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.VIEWS.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<ViewsRecord, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.VIEWS.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<ViewsRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.VIEWS.VIEW_DEFINITION</code>.
     */
    val VIEW_DEFINITION: TableField<ViewsRecord, String?> = createField(DSL.name("VIEW_DEFINITION"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>information_schema.VIEWS.CHECK_OPTION</code>.
     */
    val CHECK_OPTION: TableField<ViewsRecord, ViewsCheckOption?> = createField(DSL.name("CHECK_OPTION"), SQLDataType.VARCHAR(8).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.ViewsCheckOption::class.java), this, "")

    /**
     * The column <code>information_schema.VIEWS.IS_UPDATABLE</code>.
     */
    val IS_UPDATABLE: TableField<ViewsRecord, ViewsIsUpdatable?> = createField(DSL.name("IS_UPDATABLE"), SQLDataType.VARCHAR(3).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.ViewsIsUpdatable::class.java), this, "")

    /**
     * The column <code>information_schema.VIEWS.DEFINER</code>.
     */
    val DEFINER: TableField<ViewsRecord, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(288), this, "")

    /**
     * The column <code>information_schema.VIEWS.SECURITY_TYPE</code>.
     */
    val SECURITY_TYPE: TableField<ViewsRecord, String?> = createField(DSL.name("SECURITY_TYPE"), SQLDataType.VARCHAR(7), this, "")

    /**
     * The column <code>information_schema.VIEWS.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<ViewsRecord, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.VIEWS.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<ViewsRecord, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ViewsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ViewsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.VIEWS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.VIEWS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.VIEWS</code> table reference
     */
    constructor(): this(DSL.name("VIEWS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ViewsRecord>): this(Internal.createPathAlias(child, key), child, key, VIEWS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Views = Views(DSL.name(alias), this)
    override fun `as`(alias: Name): Views = Views(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Views = Views(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Views = Views(name, null)

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?> = super.fieldsRow() as Row10<String?, String?, String?, String?, ViewsCheckOption?, ViewsIsUpdatable?, String?, String?, String?, String?>
}
