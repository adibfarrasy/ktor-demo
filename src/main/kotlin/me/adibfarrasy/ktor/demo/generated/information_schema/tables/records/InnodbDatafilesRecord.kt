/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables.records


import me.adibfarrasy.ktor.demo.generated.information_schema.tables.InnodbDatafiles

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbDatafilesRecord() : TableRecordImpl<InnodbDatafilesRecord>(InnodbDatafiles.INNODB_DATAFILES), Record2<ByteArray?, String?> {

    var space: ByteArray?
        set(value): Unit = set(0, value)
        get(): ByteArray? = get(0) as ByteArray?

    var path: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<ByteArray?, String?> = super.fieldsRow() as Row2<ByteArray?, String?>
    override fun valuesRow(): Row2<ByteArray?, String?> = super.valuesRow() as Row2<ByteArray?, String?>
    override fun field1(): Field<ByteArray?> = InnodbDatafiles.INNODB_DATAFILES.SPACE
    override fun field2(): Field<String?> = InnodbDatafiles.INNODB_DATAFILES.PATH
    override fun component1(): ByteArray? = space
    override fun component2(): String? = path
    override fun value1(): ByteArray? = space
    override fun value2(): String? = path

    override fun value1(value: ByteArray?): InnodbDatafilesRecord {
        this.space = value
        return this
    }

    override fun value2(value: String?): InnodbDatafilesRecord {
        this.path = value
        return this
    }

    override fun values(value1: ByteArray?, value2: String?): InnodbDatafilesRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised InnodbDatafilesRecord
     */
    constructor(space: ByteArray? = null, path: String? = null): this() {
        this.space = space
        this.path = path
    }
}
