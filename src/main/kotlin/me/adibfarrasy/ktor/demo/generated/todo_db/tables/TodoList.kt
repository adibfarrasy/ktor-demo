/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.todo_db.tables


import me.adibfarrasy.ktor.demo.generated.todo_db.TodoDb
import me.adibfarrasy.ktor.demo.generated.todo_db.keys.KEY_TODO_LIST_PRIMARY
import me.adibfarrasy.ktor.demo.generated.todo_db.tables.records.TodoListRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TodoList(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TodoListRecord>?,
    aliased: Table<TodoListRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TodoListRecord>(
    alias,
    TodoDb.TODO_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>todo_db.todo_list</code>
         */
        val TODO_LIST: TodoList = TodoList()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TodoListRecord> = TodoListRecord::class.java

    /**
     * The column <code>todo_db.todo_list.id</code>.
     */
    val ID: TableField<TodoListRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>todo_db.todo_list.description</code>.
     */
    val DESCRIPTION: TableField<TodoListRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>todo_db.todo_list.status</code>.
     */
    val STATUS: TableField<TodoListRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TodoListRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TodoListRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>todo_db.todo_list</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>todo_db.todo_list</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>todo_db.todo_list</code> table reference
     */
    constructor(): this(DSL.name("todo_list"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TodoListRecord>): this(Internal.createPathAlias(child, key), child, key, TODO_LIST, null)
    override fun getSchema(): Schema? = if (aliased()) null else TodoDb.TODO_DB
    override fun getIdentity(): Identity<TodoListRecord, Int?> = super.getIdentity() as Identity<TodoListRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TodoListRecord> = KEY_TODO_LIST_PRIMARY
    override fun `as`(alias: String): TodoList = TodoList(DSL.name(alias), this)
    override fun `as`(alias: Name): TodoList = TodoList(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TodoList = TodoList(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TodoList = TodoList(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
}
