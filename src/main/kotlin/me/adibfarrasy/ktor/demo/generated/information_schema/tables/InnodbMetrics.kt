/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import java.time.LocalDateTime

import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbMetricsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row17
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbMetrics(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbMetricsRecord>?,
    aliased: Table<InnodbMetricsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbMetricsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_METRICS</code>
         */
        val INNODB_METRICS: InnodbMetrics = InnodbMetrics()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbMetricsRecord> = InnodbMetricsRecord::class.java

    /**
     * The column <code>information_schema.INNODB_METRICS.NAME</code>.
     */
    val NAME: TableField<InnodbMetricsRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.SUBSYSTEM</code>.
     */
    val SUBSYSTEM: TableField<InnodbMetricsRecord, String?> = createField(DSL.name("SUBSYSTEM"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.COUNT</code>.
     */
    val COUNT: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("COUNT"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.MAX_COUNT</code>.
     */
    val MAX_COUNT: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("MAX_COUNT"), SQLDataType.BIGINT.defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.MIN_COUNT</code>.
     */
    val MIN_COUNT: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("MIN_COUNT"), SQLDataType.BIGINT.defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.AVG_COUNT</code>.
     */
    val AVG_COUNT: TableField<InnodbMetricsRecord, Double?> = createField(DSL.name("AVG_COUNT"), SQLDataType.FLOAT.defaultValue(DSL.inline("", SQLDataType.FLOAT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.COUNT_RESET</code>.
     */
    val COUNT_RESET: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("COUNT_RESET"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_METRICS.MAX_COUNT_RESET</code>.
     */
    val MAX_COUNT_RESET: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("MAX_COUNT_RESET"), SQLDataType.BIGINT.defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_METRICS.MIN_COUNT_RESET</code>.
     */
    val MIN_COUNT_RESET: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("MIN_COUNT_RESET"), SQLDataType.BIGINT.defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_METRICS.AVG_COUNT_RESET</code>.
     */
    val AVG_COUNT_RESET: TableField<InnodbMetricsRecord, Double?> = createField(DSL.name("AVG_COUNT_RESET"), SQLDataType.FLOAT.defaultValue(DSL.inline("", SQLDataType.FLOAT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_ENABLED</code>.
     */
    val TIME_ENABLED: TableField<InnodbMetricsRecord, LocalDateTime?> = createField(DSL.name("TIME_ENABLED"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_DISABLED</code>.
     */
    val TIME_DISABLED: TableField<InnodbMetricsRecord, LocalDateTime?> = createField(DSL.name("TIME_DISABLED"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_ELAPSED</code>.
     */
    val TIME_ELAPSED: TableField<InnodbMetricsRecord, Long?> = createField(DSL.name("TIME_ELAPSED"), SQLDataType.BIGINT.defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.TIME_RESET</code>.
     */
    val TIME_RESET: TableField<InnodbMetricsRecord, LocalDateTime?> = createField(DSL.name("TIME_RESET"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.STATUS</code>.
     */
    val STATUS: TableField<InnodbMetricsRecord, String?> = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.TYPE</code>.
     */
    val TYPE: TableField<InnodbMetricsRecord, String?> = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_METRICS.COMMENT</code>.
     */
    val COMMENT: TableField<InnodbMetricsRecord, String?> = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbMetricsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbMetricsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_METRICS</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_METRICS</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_METRICS</code> table reference
     */
    constructor(): this(DSL.name("INNODB_METRICS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbMetricsRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_METRICS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbMetrics = InnodbMetrics(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbMetrics = InnodbMetrics(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbMetrics = InnodbMetrics(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbMetrics = InnodbMetrics(name, null)

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row17<String?, String?, Long?, Long?, Long?, Double?, Long?, Long?, Long?, Double?, LocalDateTime?, LocalDateTime?, Long?, LocalDateTime?, String?, String?, String?> = super.fieldsRow() as Row17<String?, String?, Long?, Long?, Long?, Double?, Long?, Long?, Long?, Double?, LocalDateTime?, LocalDateTime?, Long?, LocalDateTime?, String?, String?, String?>
}
