/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.ApplicableRolesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ApplicableRoles(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ApplicableRolesRecord>?,
    aliased: Table<ApplicableRolesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ApplicableRolesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.APPLICABLE_ROLES</code>
         */
        val APPLICABLE_ROLES: ApplicableRoles = ApplicableRoles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ApplicableRolesRecord> = ApplicableRolesRecord::class.java

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.USER</code>.
     */
    val USER: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("USER"), SQLDataType.VARCHAR(97), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.HOST</code>.
     */
    val HOST: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("HOST"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.GRANTEE</code>.
     */
    val GRANTEE: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("GRANTEE"), SQLDataType.VARCHAR(97), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.GRANTEE_HOST</code>.
     */
    val GRANTEE_HOST: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("GRANTEE_HOST"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.ROLE_NAME</code>.
     */
    val ROLE_NAME: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("ROLE_NAME"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.ROLE_HOST</code>.
     */
    val ROLE_HOST: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("ROLE_HOST"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.IS_GRANTABLE</code>.
     */
    val IS_GRANTABLE: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("IS_GRANTABLE"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.IS_DEFAULT</code>.
     */
    val IS_DEFAULT: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("IS_DEFAULT"), SQLDataType.VARCHAR(3), this, "")

    /**
     * The column <code>information_schema.APPLICABLE_ROLES.IS_MANDATORY</code>.
     */
    val IS_MANDATORY: TableField<ApplicableRolesRecord, String?> = createField(DSL.name("IS_MANDATORY"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<ApplicableRolesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ApplicableRolesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.APPLICABLE_ROLES</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.APPLICABLE_ROLES</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.APPLICABLE_ROLES</code> table reference
     */
    constructor(): this(DSL.name("APPLICABLE_ROLES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ApplicableRolesRecord>): this(Internal.createPathAlias(child, key), child, key, APPLICABLE_ROLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ApplicableRoles = ApplicableRoles(DSL.name(alias), this)
    override fun `as`(alias: Name): ApplicableRoles = ApplicableRoles(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ApplicableRoles = ApplicableRoles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ApplicableRoles = ApplicableRoles(name, null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<String?, String?, String?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row9<String?, String?, String?, String?, String?, String?, String?, String?, String?>
}
