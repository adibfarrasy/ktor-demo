/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbCmpPerIndexRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbCmpPerIndex(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbCmpPerIndexRecord>?,
    aliased: Table<InnodbCmpPerIndexRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbCmpPerIndexRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_CMP_PER_INDEX</code>
         */
        val INNODB_CMP_PER_INDEX: InnodbCmpPerIndex = InnodbCmpPerIndex()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbCmpPerIndexRecord> = InnodbCmpPerIndexRecord::class.java

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.database_name</code>.
     */
    val DATABASE_NAME: TableField<InnodbCmpPerIndexRecord, String?> = createField(DSL.name("database_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.table_name</code>.
     */
    val TABLE_NAME: TableField<InnodbCmpPerIndexRecord, String?> = createField(DSL.name("table_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.index_name</code>.
     */
    val INDEX_NAME: TableField<InnodbCmpPerIndexRecord, String?> = createField(DSL.name("index_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.compress_ops</code>.
     */
    val COMPRESS_OPS: TableField<InnodbCmpPerIndexRecord, Int?> = createField(DSL.name("compress_ops"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.compress_ops_ok</code>.
     */
    val COMPRESS_OPS_OK: TableField<InnodbCmpPerIndexRecord, Int?> = createField(DSL.name("compress_ops_ok"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.compress_time</code>.
     */
    val COMPRESS_TIME: TableField<InnodbCmpPerIndexRecord, Int?> = createField(DSL.name("compress_time"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.uncompress_ops</code>.
     */
    val UNCOMPRESS_OPS: TableField<InnodbCmpPerIndexRecord, Int?> = createField(DSL.name("uncompress_ops"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMP_PER_INDEX.uncompress_time</code>.
     */
    val UNCOMPRESS_TIME: TableField<InnodbCmpPerIndexRecord, Int?> = createField(DSL.name("uncompress_time"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbCmpPerIndexRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbCmpPerIndexRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_CMP_PER_INDEX</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_CMP_PER_INDEX</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_CMP_PER_INDEX</code> table
     * reference
     */
    constructor(): this(DSL.name("INNODB_CMP_PER_INDEX"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbCmpPerIndexRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_CMP_PER_INDEX, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbCmpPerIndex = InnodbCmpPerIndex(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbCmpPerIndex = InnodbCmpPerIndex(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbCmpPerIndex = InnodbCmpPerIndex(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbCmpPerIndex = InnodbCmpPerIndex(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<String?, String?, String?, Int?, Int?, Int?, Int?, Int?> = super.fieldsRow() as Row8<String?, String?, String?, Int?, Int?, Int?, Int?, Int?>
}
