/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbCmpmemRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbCmpmem(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbCmpmemRecord>?,
    aliased: Table<InnodbCmpmemRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbCmpmemRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_CMPMEM</code>
         */
        val INNODB_CMPMEM: InnodbCmpmem = InnodbCmpmem()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbCmpmemRecord> = InnodbCmpmemRecord::class.java

    /**
     * The column <code>information_schema.INNODB_CMPMEM.page_size</code>.
     */
    val PAGE_SIZE: TableField<InnodbCmpmemRecord, Int?> = createField(DSL.name("page_size"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CMPMEM.buffer_pool_instance</code>.
     */
    val BUFFER_POOL_INSTANCE: TableField<InnodbCmpmemRecord, Int?> = createField(DSL.name("buffer_pool_instance"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_CMPMEM.pages_used</code>.
     */
    val PAGES_USED: TableField<InnodbCmpmemRecord, Int?> = createField(DSL.name("pages_used"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_CMPMEM.pages_free</code>.
     */
    val PAGES_FREE: TableField<InnodbCmpmemRecord, Int?> = createField(DSL.name("pages_free"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.INNODB_CMPMEM.relocation_ops</code>.
     */
    val RELOCATION_OPS: TableField<InnodbCmpmemRecord, Long?> = createField(DSL.name("relocation_ops"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>information_schema.INNODB_CMPMEM.relocation_time</code>.
     */
    val RELOCATION_TIME: TableField<InnodbCmpmemRecord, Int?> = createField(DSL.name("relocation_time"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbCmpmemRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbCmpmemRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_CMPMEM</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_CMPMEM</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_CMPMEM</code> table reference
     */
    constructor(): this(DSL.name("INNODB_CMPMEM"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbCmpmemRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_CMPMEM, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbCmpmem = InnodbCmpmem(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbCmpmem = InnodbCmpmem(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbCmpmem = InnodbCmpmem(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbCmpmem = InnodbCmpmem(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, Int?, Int?, Int?, Long?, Int?> = super.fieldsRow() as Row6<Int?, Int?, Int?, Int?, Long?, Int?>
}
