/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import java.time.LocalDateTime

import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.TablesRowFormat
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.TablesTableType
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.TablesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row21
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tables(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TablesRecord>?,
    aliased: Table<TablesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TablesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.TABLES</code>
         */
        val TABLES: Tables = Tables()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TablesRecord> = TablesRecord::class.java

    /**
     * The column <code>information_schema.TABLES.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<TablesRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<TablesRecord, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<TablesRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_TYPE</code>.
     */
    val TABLE_TYPE: TableField<TablesRecord, TablesTableType?> = createField(DSL.name("TABLE_TYPE"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.TablesTableType::class.java), this, "")

    /**
     * The column <code>information_schema.TABLES.ENGINE</code>.
     */
    val ENGINE: TableField<TablesRecord, String?> = createField(DSL.name("ENGINE"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TABLES.VERSION</code>.
     */
    val VERSION: TableField<TablesRecord, Int?> = createField(DSL.name("VERSION"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>information_schema.TABLES.ROW_FORMAT</code>.
     */
    val ROW_FORMAT: TableField<TablesRecord, TablesRowFormat?> = createField(DSL.name("ROW_FORMAT"), SQLDataType.VARCHAR(10).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.TablesRowFormat::class.java), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_ROWS</code>.
     */
    val TABLE_ROWS: TableField<TablesRecord, ULong?> = createField(DSL.name("TABLE_ROWS"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.AVG_ROW_LENGTH</code>.
     */
    val AVG_ROW_LENGTH: TableField<TablesRecord, ULong?> = createField(DSL.name("AVG_ROW_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.DATA_LENGTH</code>.
     */
    val DATA_LENGTH: TableField<TablesRecord, ULong?> = createField(DSL.name("DATA_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.MAX_DATA_LENGTH</code>.
     */
    val MAX_DATA_LENGTH: TableField<TablesRecord, ULong?> = createField(DSL.name("MAX_DATA_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.INDEX_LENGTH</code>.
     */
    val INDEX_LENGTH: TableField<TablesRecord, ULong?> = createField(DSL.name("INDEX_LENGTH"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.DATA_FREE</code>.
     */
    val DATA_FREE: TableField<TablesRecord, ULong?> = createField(DSL.name("DATA_FREE"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.AUTO_INCREMENT</code>.
     */
    val AUTO_INCREMENT: TableField<TablesRecord, ULong?> = createField(DSL.name("AUTO_INCREMENT"), SQLDataType.BIGINTUNSIGNED, this, "")

    /**
     * The column <code>information_schema.TABLES.CREATE_TIME</code>.
     */
    val CREATE_TIME: TableField<TablesRecord, LocalDateTime?> = createField(DSL.name("CREATE_TIME"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.TABLES.UPDATE_TIME</code>.
     */
    val UPDATE_TIME: TableField<TablesRecord, LocalDateTime?> = createField(DSL.name("UPDATE_TIME"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.TABLES.CHECK_TIME</code>.
     */
    val CHECK_TIME: TableField<TablesRecord, LocalDateTime?> = createField(DSL.name("CHECK_TIME"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_COLLATION</code>.
     */
    val TABLE_COLLATION: TableField<TablesRecord, String?> = createField(DSL.name("TABLE_COLLATION"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.TABLES.CHECKSUM</code>.
     */
    val CHECKSUM: TableField<TablesRecord, Long?> = createField(DSL.name("CHECKSUM"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.TABLES.CREATE_OPTIONS</code>.
     */
    val CREATE_OPTIONS: TableField<TablesRecord, String?> = createField(DSL.name("CREATE_OPTIONS"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.TABLES.TABLE_COMMENT</code>.
     */
    val TABLE_COMMENT: TableField<TablesRecord, String?> = createField(DSL.name("TABLE_COMMENT"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<TablesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TablesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.TABLES</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.TABLES</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.TABLES</code> table reference
     */
    constructor(): this(DSL.name("TABLES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TablesRecord>): this(Internal.createPathAlias(child, key), child, key, TABLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Tables = Tables(DSL.name(alias), this)
    override fun `as`(alias: Name): Tables = Tables(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tables = Tables(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tables = Tables(name, null)

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row21<String?, String?, String?, TablesTableType?, String?, Int?, TablesRowFormat?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, Long?, String?, String?> = super.fieldsRow() as Row21<String?, String?, String?, TablesTableType?, String?, Int?, TablesRowFormat?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, ULong?, LocalDateTime?, LocalDateTime?, LocalDateTime?, String?, Long?, String?, String?>
}
