/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import java.time.LocalDateTime

import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.EventsIntervalField
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.EventsStatus
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.EventsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Events(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EventsRecord>?,
    aliased: Table<EventsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EventsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.EVENTS</code>
         */
        val EVENTS: Events = Events()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EventsRecord> = EventsRecord::class.java

    /**
     * The column <code>information_schema.EVENTS.EVENT_CATALOG</code>.
     */
    val EVENT_CATALOG: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_SCHEMA</code>.
     */
    val EVENT_SCHEMA: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_NAME</code>.
     */
    val EVENT_NAME: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.DEFINER</code>.
     */
    val DEFINER: TableField<EventsRecord, String?> = createField(DSL.name("DEFINER"), SQLDataType.VARCHAR(288).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.TIME_ZONE</code>.
     */
    val TIME_ZONE: TableField<EventsRecord, String?> = createField(DSL.name("TIME_ZONE"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_BODY</code>.
     */
    val EVENT_BODY: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_BODY"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_DEFINITION</code>.
     */
    val EVENT_DEFINITION: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_DEFINITION"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_TYPE</code>.
     */
    val EVENT_TYPE: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_TYPE"), SQLDataType.VARCHAR(9).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.EXECUTE_AT</code>.
     */
    val EXECUTE_AT: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("EXECUTE_AT"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.INTERVAL_VALUE</code>.
     */
    val INTERVAL_VALUE: TableField<EventsRecord, String?> = createField(DSL.name("INTERVAL_VALUE"), SQLDataType.VARCHAR(256), this, "")

    /**
     * The column <code>information_schema.EVENTS.INTERVAL_FIELD</code>.
     */
    val INTERVAL_FIELD: TableField<EventsRecord, EventsIntervalField?> = createField(DSL.name("INTERVAL_FIELD"), SQLDataType.VARCHAR(18).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.EventsIntervalField::class.java), this, "")

    /**
     * The column <code>information_schema.EVENTS.SQL_MODE</code>.
     */
    val SQL_MODE: TableField<EventsRecord, String?> = createField(DSL.name("SQL_MODE"), SQLDataType.VARCHAR(520).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.STARTS</code>.
     */
    val STARTS: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("STARTS"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.ENDS</code>.
     */
    val ENDS: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("ENDS"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.STATUS</code>.
     */
    val STATUS: TableField<EventsRecord, EventsStatus?> = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(18).nullable(false).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.EventsStatus::class.java), this, "")

    /**
     * The column <code>information_schema.EVENTS.ON_COMPLETION</code>.
     */
    val ON_COMPLETION: TableField<EventsRecord, String?> = createField(DSL.name("ON_COMPLETION"), SQLDataType.VARCHAR(12).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.EVENTS.CREATED</code>.
     */
    val CREATED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("CREATED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.LAST_ALTERED</code>.
     */
    val LAST_ALTERED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("LAST_ALTERED"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.LAST_EXECUTED</code>.
     */
    val LAST_EXECUTED: TableField<EventsRecord, LocalDateTime?> = createField(DSL.name("LAST_EXECUTED"), SQLDataType.LOCALDATETIME(0), this, "")

    /**
     * The column <code>information_schema.EVENTS.EVENT_COMMENT</code>.
     */
    val EVENT_COMMENT: TableField<EventsRecord, String?> = createField(DSL.name("EVENT_COMMENT"), SQLDataType.VARCHAR(2048).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.ORIGINATOR</code>.
     */
    val ORIGINATOR: TableField<EventsRecord, UInteger?> = createField(DSL.name("ORIGINATOR"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.CHARACTER_SET_CLIENT</code>.
     */
    val CHARACTER_SET_CLIENT: TableField<EventsRecord, String?> = createField(DSL.name("CHARACTER_SET_CLIENT"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.COLLATION_CONNECTION</code>.
     */
    val COLLATION_CONNECTION: TableField<EventsRecord, String?> = createField(DSL.name("COLLATION_CONNECTION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.EVENTS.DATABASE_COLLATION</code>.
     */
    val DATABASE_COLLATION: TableField<EventsRecord, String?> = createField(DSL.name("DATABASE_COLLATION"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<EventsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EventsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.EVENTS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.EVENTS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.EVENTS</code> table reference
     */
    constructor(): this(DSL.name("EVENTS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EventsRecord>): this(Internal.createPathAlias(child, key), child, key, EVENTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Events = Events(DSL.name(alias), this)
    override fun `as`(alias: Name): Events = Events(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Events = Events(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Events = Events(name, null)
}
