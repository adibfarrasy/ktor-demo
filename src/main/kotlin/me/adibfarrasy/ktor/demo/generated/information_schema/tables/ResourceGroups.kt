/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.enums.ResourceGroupsResourceGroupType
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.ResourceGroupsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ResourceGroups(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ResourceGroupsRecord>?,
    aliased: Table<ResourceGroupsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ResourceGroupsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.RESOURCE_GROUPS</code>
         */
        val RESOURCE_GROUPS: ResourceGroups = ResourceGroups()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ResourceGroupsRecord> = ResourceGroupsRecord::class.java

    /**
     * The column
     * <code>information_schema.RESOURCE_GROUPS.RESOURCE_GROUP_NAME</code>.
     */
    val RESOURCE_GROUP_NAME: TableField<ResourceGroupsRecord, String?> = createField(DSL.name("RESOURCE_GROUP_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>information_schema.RESOURCE_GROUPS.RESOURCE_GROUP_TYPE</code>.
     */
    val RESOURCE_GROUP_TYPE: TableField<ResourceGroupsRecord, ResourceGroupsResourceGroupType?> = createField(DSL.name("RESOURCE_GROUP_TYPE"), SQLDataType.VARCHAR(6).nullable(false).asEnumDataType(me.adibfarrasy.ktor.demo.generated.information_schema.enums.ResourceGroupsResourceGroupType::class.java), this, "")

    /**
     * The column
     * <code>information_schema.RESOURCE_GROUPS.RESOURCE_GROUP_ENABLED</code>.
     */
    val RESOURCE_GROUP_ENABLED: TableField<ResourceGroupsRecord, Byte?> = createField(DSL.name("RESOURCE_GROUP_ENABLED"), SQLDataType.TINYINT.nullable(false), this, "")

    /**
     * The column <code>information_schema.RESOURCE_GROUPS.VCPU_IDS</code>.
     */
    val VCPU_IDS: TableField<ResourceGroupsRecord, ByteArray?> = createField(DSL.name("VCPU_IDS"), SQLDataType.BLOB, this, "")

    /**
     * The column
     * <code>information_schema.RESOURCE_GROUPS.THREAD_PRIORITY</code>.
     */
    val THREAD_PRIORITY: TableField<ResourceGroupsRecord, Int?> = createField(DSL.name("THREAD_PRIORITY"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ResourceGroupsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ResourceGroupsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.RESOURCE_GROUPS</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.RESOURCE_GROUPS</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.RESOURCE_GROUPS</code> table reference
     */
    constructor(): this(DSL.name("RESOURCE_GROUPS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ResourceGroupsRecord>): this(Internal.createPathAlias(child, key), child, key, RESOURCE_GROUPS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ResourceGroups = ResourceGroups(DSL.name(alias), this)
    override fun `as`(alias: Name): ResourceGroups = ResourceGroups(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ResourceGroups = ResourceGroups(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ResourceGroups = ResourceGroups(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<String?, ResourceGroupsResourceGroupType?, Byte?, ByteArray?, Int?> = super.fieldsRow() as Row5<String?, ResourceGroupsResourceGroupType?, Byte?, ByteArray?, Int?>
}
