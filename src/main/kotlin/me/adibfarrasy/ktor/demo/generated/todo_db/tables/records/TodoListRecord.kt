/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.todo_db.tables.records


import me.adibfarrasy.ktor.demo.generated.todo_db.tables.TodoList

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TodoListRecord() : UpdatableRecordImpl<TodoListRecord>(TodoList.TODO_LIST), Record3<Int?, String?, String?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var description: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var status: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>
    override fun valuesRow(): Row3<Int?, String?, String?> = super.valuesRow() as Row3<Int?, String?, String?>
    override fun field1(): Field<Int?> = TodoList.TODO_LIST.ID
    override fun field2(): Field<String?> = TodoList.TODO_LIST.DESCRIPTION
    override fun field3(): Field<String?> = TodoList.TODO_LIST.STATUS
    override fun component1(): Int? = id
    override fun component2(): String? = description
    override fun component3(): String? = status
    override fun value1(): Int? = id
    override fun value2(): String? = description
    override fun value3(): String? = status

    override fun value1(value: Int?): TodoListRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): TodoListRecord {
        this.description = value
        return this
    }

    override fun value3(value: String?): TodoListRecord {
        this.status = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?): TodoListRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised TodoListRecord
     */
    constructor(id: Int? = null, description: String? = null, status: String? = null): this() {
        this.id = id
        this.description = description
        this.status = status
    }
}
