/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbCachedIndexesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbCachedIndexes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbCachedIndexesRecord>?,
    aliased: Table<InnodbCachedIndexesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbCachedIndexesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_CACHED_INDEXES</code>
         */
        val INNODB_CACHED_INDEXES: InnodbCachedIndexes = InnodbCachedIndexes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbCachedIndexesRecord> = InnodbCachedIndexesRecord::class.java

    /**
     * The column
     * <code>information_schema.INNODB_CACHED_INDEXES.SPACE_ID</code>.
     */
    val SPACE_ID: TableField<InnodbCachedIndexesRecord, UInteger?> = createField(DSL.name("SPACE_ID"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CACHED_INDEXES.INDEX_ID</code>.
     */
    val INDEX_ID: TableField<InnodbCachedIndexesRecord, ULong?> = createField(DSL.name("INDEX_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_CACHED_INDEXES.N_CACHED_PAGES</code>.
     */
    val N_CACHED_PAGES: TableField<InnodbCachedIndexesRecord, ULong?> = createField(DSL.name("N_CACHED_PAGES"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbCachedIndexesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbCachedIndexesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_CACHED_INDEXES</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_CACHED_INDEXES</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_CACHED_INDEXES</code> table
     * reference
     */
    constructor(): this(DSL.name("INNODB_CACHED_INDEXES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbCachedIndexesRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_CACHED_INDEXES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbCachedIndexes = InnodbCachedIndexes(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbCachedIndexes = InnodbCachedIndexes(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbCachedIndexes = InnodbCachedIndexes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbCachedIndexes = InnodbCachedIndexes(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<UInteger?, ULong?, ULong?> = super.fieldsRow() as Row3<UInteger?, ULong?, ULong?>
}
