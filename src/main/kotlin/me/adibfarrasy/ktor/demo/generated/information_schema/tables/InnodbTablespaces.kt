/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbTablespacesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row15
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbTablespaces(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbTablespacesRecord>?,
    aliased: Table<InnodbTablespacesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbTablespacesRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_TABLESPACES</code>
         */
        val INNODB_TABLESPACES: InnodbTablespaces = InnodbTablespaces()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbTablespacesRecord> = InnodbTablespacesRecord::class.java

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.SPACE</code>.
     */
    val SPACE: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("SPACE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.NAME</code>.
     */
    val NAME: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("NAME"), SQLDataType.VARCHAR(218).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.FLAG</code>.
     */
    val FLAG: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("FLAG"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.ROW_FORMAT</code>.
     */
    val ROW_FORMAT: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("ROW_FORMAT"), SQLDataType.VARCHAR(7).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.PAGE_SIZE</code>.
     */
    val PAGE_SIZE: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("PAGE_SIZE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.ZIP_PAGE_SIZE</code>.
     */
    val ZIP_PAGE_SIZE: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("ZIP_PAGE_SIZE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.SPACE_TYPE</code>.
     */
    val SPACE_TYPE: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("SPACE_TYPE"), SQLDataType.VARCHAR(3).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.FS_BLOCK_SIZE</code>.
     */
    val FS_BLOCK_SIZE: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("FS_BLOCK_SIZE"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.FILE_SIZE</code>.
     */
    val FILE_SIZE: TableField<InnodbTablespacesRecord, ULong?> = createField(DSL.name("FILE_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.ALLOCATED_SIZE</code>.
     */
    val ALLOCATED_SIZE: TableField<InnodbTablespacesRecord, ULong?> = createField(DSL.name("ALLOCATED_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.AUTOEXTEND_SIZE</code>.
     */
    val AUTOEXTEND_SIZE: TableField<InnodbTablespacesRecord, ULong?> = createField(DSL.name("AUTOEXTEND_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.SERVER_VERSION</code>.
     */
    val SERVER_VERSION: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("SERVER_VERSION"), SQLDataType.VARCHAR(3).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_TABLESPACES.SPACE_VERSION</code>.
     */
    val SPACE_VERSION: TableField<InnodbTablespacesRecord, UInteger?> = createField(DSL.name("SPACE_VERSION"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.ENCRYPTION</code>.
     */
    val ENCRYPTION: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("ENCRYPTION"), SQLDataType.VARCHAR.defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_TABLESPACES.STATE</code>.
     */
    val STATE: TableField<InnodbTablespacesRecord, String?> = createField(DSL.name("STATE"), SQLDataType.VARCHAR(3).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbTablespacesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbTablespacesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_TABLESPACES</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_TABLESPACES</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_TABLESPACES</code> table
     * reference
     */
    constructor(): this(DSL.name("INNODB_TABLESPACES"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbTablespacesRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_TABLESPACES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbTablespaces = InnodbTablespaces(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbTablespaces = InnodbTablespaces(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbTablespaces = InnodbTablespaces(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbTablespaces = InnodbTablespaces(name, null)

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row15<UInteger?, String?, UInteger?, String?, UInteger?, UInteger?, String?, UInteger?, ULong?, ULong?, ULong?, String?, UInteger?, String?, String?> = super.fieldsRow() as Row15<UInteger?, String?, UInteger?, String?, UInteger?, UInteger?, String?, UInteger?, ULong?, ULong?, ULong?, String?, UInteger?, String?, String?>
}
