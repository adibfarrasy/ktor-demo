/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.ColumnsExtensionsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.JSON
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ColumnsExtensions(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ColumnsExtensionsRecord>?,
    aliased: Table<ColumnsExtensionsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ColumnsExtensionsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.COLUMNS_EXTENSIONS</code>
         */
        val COLUMNS_EXTENSIONS: ColumnsExtensions = ColumnsExtensions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ColumnsExtensionsRecord> = ColumnsExtensionsRecord::class.java

    /**
     * The column
     * <code>information_schema.COLUMNS_EXTENSIONS.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<ColumnsExtensionsRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>information_schema.COLUMNS_EXTENSIONS.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<ColumnsExtensionsRecord, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.COLUMNS_EXTENSIONS.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<ColumnsExtensionsRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column
     * <code>information_schema.COLUMNS_EXTENSIONS.COLUMN_NAME</code>.
     */
    val COLUMN_NAME: TableField<ColumnsExtensionsRecord, String?> = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column
     * <code>information_schema.COLUMNS_EXTENSIONS.ENGINE_ATTRIBUTE</code>.
     */
    val ENGINE_ATTRIBUTE: TableField<ColumnsExtensionsRecord, JSON?> = createField(DSL.name("ENGINE_ATTRIBUTE"), SQLDataType.JSON, this, "")

    /**
     * The column
     * <code>information_schema.COLUMNS_EXTENSIONS.SECONDARY_ENGINE_ATTRIBUTE</code>.
     */
    val SECONDARY_ENGINE_ATTRIBUTE: TableField<ColumnsExtensionsRecord, JSON?> = createField(DSL.name("SECONDARY_ENGINE_ATTRIBUTE"), SQLDataType.JSON, this, "")

    private constructor(alias: Name, aliased: Table<ColumnsExtensionsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ColumnsExtensionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.COLUMNS_EXTENSIONS</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.COLUMNS_EXTENSIONS</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.COLUMNS_EXTENSIONS</code> table
     * reference
     */
    constructor(): this(DSL.name("COLUMNS_EXTENSIONS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ColumnsExtensionsRecord>): this(Internal.createPathAlias(child, key), child, key, COLUMNS_EXTENSIONS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ColumnsExtensions = ColumnsExtensions(DSL.name(alias), this)
    override fun `as`(alias: Name): ColumnsExtensions = ColumnsExtensions(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ColumnsExtensions = ColumnsExtensions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ColumnsExtensions = ColumnsExtensions(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, String?, String?, JSON?, JSON?> = super.fieldsRow() as Row6<String?, String?, String?, String?, JSON?, JSON?>
}
