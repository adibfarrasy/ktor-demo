/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.InnodbBufferPageRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row21
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InnodbBufferPage(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, InnodbBufferPageRecord>?,
    aliased: Table<InnodbBufferPageRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<InnodbBufferPageRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.INNODB_BUFFER_PAGE</code>
         */
        val INNODB_BUFFER_PAGE: InnodbBufferPage = InnodbBufferPage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InnodbBufferPageRecord> = InnodbBufferPageRecord::class.java

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.POOL_ID</code>.
     */
    val POOL_ID: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("POOL_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.BLOCK_ID</code>.
     */
    val BLOCK_ID: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("BLOCK_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.SPACE</code>.
     */
    val SPACE: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("SPACE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.PAGE_NUMBER</code>.
     */
    val PAGE_NUMBER: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("PAGE_NUMBER"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.PAGE_TYPE</code>.
     */
    val PAGE_TYPE: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("PAGE_TYPE"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.FLUSH_TYPE</code>.
     */
    val FLUSH_TYPE: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("FLUSH_TYPE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.FIX_COUNT</code>.
     */
    val FIX_COUNT: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("FIX_COUNT"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.IS_HASHED</code>.
     */
    val IS_HASHED: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("IS_HASHED"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.NEWEST_MODIFICATION</code>.
     */
    val NEWEST_MODIFICATION: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("NEWEST_MODIFICATION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.OLDEST_MODIFICATION</code>.
     */
    val OLDEST_MODIFICATION: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("OLDEST_MODIFICATION"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.ACCESS_TIME</code>.
     */
    val ACCESS_TIME: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("ACCESS_TIME"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(341).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.INDEX_NAME</code>.
     */
    val INDEX_NAME: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(341).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.NUMBER_RECORDS</code>.
     */
    val NUMBER_RECORDS: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("NUMBER_RECORDS"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.DATA_SIZE</code>.
     */
    val DATA_SIZE: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("DATA_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.COMPRESSED_SIZE</code>.
     */
    val COMPRESSED_SIZE: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("COMPRESSED_SIZE"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.PAGE_STATE</code>.
     */
    val PAGE_STATE: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("PAGE_STATE"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.IO_FIX</code>.
     */
    val IO_FIX: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("IO_FIX"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.IS_OLD</code>.
     */
    val IS_OLD: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("IS_OLD"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>information_schema.INNODB_BUFFER_PAGE.FREE_PAGE_CLOCK</code>.
     */
    val FREE_PAGE_CLOCK: TableField<InnodbBufferPageRecord, ULong?> = createField(DSL.name("FREE_PAGE_CLOCK"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.INNODB_BUFFER_PAGE.IS_STALE</code>.
     */
    val IS_STALE: TableField<InnodbBufferPageRecord, String?> = createField(DSL.name("IS_STALE"), SQLDataType.VARCHAR(1).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<InnodbBufferPageRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<InnodbBufferPageRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.INNODB_BUFFER_PAGE</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.INNODB_BUFFER_PAGE</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.INNODB_BUFFER_PAGE</code> table
     * reference
     */
    constructor(): this(DSL.name("INNODB_BUFFER_PAGE"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, InnodbBufferPageRecord>): this(Internal.createPathAlias(child, key), child, key, INNODB_BUFFER_PAGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): InnodbBufferPage = InnodbBufferPage(DSL.name(alias), this)
    override fun `as`(alias: Name): InnodbBufferPage = InnodbBufferPage(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InnodbBufferPage = InnodbBufferPage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InnodbBufferPage = InnodbBufferPage(name, null)

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row21<ULong?, ULong?, ULong?, ULong?, String?, ULong?, ULong?, String?, ULong?, ULong?, ULong?, String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, ULong?, String?> = super.fieldsRow() as Row21<ULong?, ULong?, ULong?, ULong?, String?, ULong?, ULong?, String?, ULong?, ULong?, ULong?, String?, String?, ULong?, ULong?, ULong?, String?, String?, String?, ULong?, String?>
}
