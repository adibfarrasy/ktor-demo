/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.ProcesslistRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.ULong


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Processlist(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProcesslistRecord>?,
    aliased: Table<ProcesslistRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProcesslistRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.PROCESSLIST</code>
         */
        val PROCESSLIST: Processlist = Processlist()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProcesslistRecord> = ProcesslistRecord::class.java

    /**
     * The column <code>information_schema.PROCESSLIST.ID</code>.
     */
    val ID: TableField<ProcesslistRecord, ULong?> = createField(DSL.name("ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(DSL.inline("", SQLDataType.BIGINTUNSIGNED)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.USER</code>.
     */
    val USER: TableField<ProcesslistRecord, String?> = createField(DSL.name("USER"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.HOST</code>.
     */
    val HOST: TableField<ProcesslistRecord, String?> = createField(DSL.name("HOST"), SQLDataType.VARCHAR(87).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.DB</code>.
     */
    val DB: TableField<ProcesslistRecord, String?> = createField(DSL.name("DB"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.COMMAND</code>.
     */
    val COMMAND: TableField<ProcesslistRecord, String?> = createField(DSL.name("COMMAND"), SQLDataType.VARCHAR(5).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.TIME</code>.
     */
    val TIME: TableField<ProcesslistRecord, Int?> = createField(DSL.name("TIME"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.STATE</code>.
     */
    val STATE: TableField<ProcesslistRecord, String?> = createField(DSL.name("STATE"), SQLDataType.VARCHAR(21).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.PROCESSLIST.INFO</code>.
     */
    val INFO: TableField<ProcesslistRecord, String?> = createField(DSL.name("INFO"), SQLDataType.VARCHAR(21845).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<ProcesslistRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProcesslistRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.PROCESSLIST</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.PROCESSLIST</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.PROCESSLIST</code> table reference
     */
    constructor(): this(DSL.name("PROCESSLIST"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProcesslistRecord>): this(Internal.createPathAlias(child, key), child, key, PROCESSLIST, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Processlist = Processlist(DSL.name(alias), this)
    override fun `as`(alias: Name): Processlist = Processlist(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Processlist = Processlist(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Processlist = Processlist(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<ULong?, String?, String?, String?, String?, Int?, String?, String?> = super.fieldsRow() as Row8<ULong?, String?, String?, String?, String?, Int?, String?, String?>
}
