/*
 * This file is generated by jOOQ.
 */
package me.adibfarrasy.ktor.demo.generated.information_schema.tables


import me.adibfarrasy.ktor.demo.generated.information_schema.InformationSchema
import me.adibfarrasy.ktor.demo.generated.information_schema.tables.records.StatisticsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row18
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Statistics(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StatisticsRecord>?,
    aliased: Table<StatisticsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StatisticsRecord>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.STATISTICS</code>
         */
        val STATISTICS: Statistics = Statistics()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StatisticsRecord> = StatisticsRecord::class.java

    /**
     * The column <code>information_schema.STATISTICS.TABLE_CATALOG</code>.
     */
    val TABLE_CATALOG: TableField<StatisticsRecord, String?> = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.TABLE_SCHEMA</code>.
     */
    val TABLE_SCHEMA: TableField<StatisticsRecord, String?> = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.TABLE_NAME</code>.
     */
    val TABLE_NAME: TableField<StatisticsRecord, String?> = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.NON_UNIQUE</code>.
     */
    val NON_UNIQUE: TableField<StatisticsRecord, Int?> = createField(DSL.name("NON_UNIQUE"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>information_schema.STATISTICS.INDEX_SCHEMA</code>.
     */
    val INDEX_SCHEMA: TableField<StatisticsRecord, String?> = createField(DSL.name("INDEX_SCHEMA"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.INDEX_NAME</code>.
     */
    val INDEX_NAME: TableField<StatisticsRecord, String?> = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.STATISTICS.SEQ_IN_INDEX</code>.
     */
    val SEQ_IN_INDEX: TableField<StatisticsRecord, UInteger?> = createField(DSL.name("SEQ_IN_INDEX"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.COLUMN_NAME</code>.
     */
    val COLUMN_NAME: TableField<StatisticsRecord, String?> = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(64), this, "")

    /**
     * The column <code>information_schema.STATISTICS.COLLATION</code>.
     */
    val COLLATION: TableField<StatisticsRecord, String?> = createField(DSL.name("COLLATION"), SQLDataType.VARCHAR(1), this, "")

    /**
     * The column <code>information_schema.STATISTICS.CARDINALITY</code>.
     */
    val CARDINALITY: TableField<StatisticsRecord, Long?> = createField(DSL.name("CARDINALITY"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.STATISTICS.SUB_PART</code>.
     */
    val SUB_PART: TableField<StatisticsRecord, Long?> = createField(DSL.name("SUB_PART"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>information_schema.STATISTICS.PACKED</code>.
     */
    val PACKED: TableField<StatisticsRecord, ByteArray?> = createField(DSL.name("PACKED"), SQLDataType.BINARY, this, "")

    /**
     * The column <code>information_schema.STATISTICS.NULLABLE</code>.
     */
    val NULLABLE: TableField<StatisticsRecord, String?> = createField(DSL.name("NULLABLE"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.STATISTICS.INDEX_TYPE</code>.
     */
    val INDEX_TYPE: TableField<StatisticsRecord, String?> = createField(DSL.name("INDEX_TYPE"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.STATISTICS.COMMENT</code>.
     */
    val COMMENT: TableField<StatisticsRecord, String?> = createField(DSL.name("COMMENT"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.STATISTICS.INDEX_COMMENT</code>.
     */
    val INDEX_COMMENT: TableField<StatisticsRecord, String?> = createField(DSL.name("INDEX_COMMENT"), SQLDataType.VARCHAR(2048).nullable(false), this, "")

    /**
     * The column <code>information_schema.STATISTICS.IS_VISIBLE</code>.
     */
    val IS_VISIBLE: TableField<StatisticsRecord, String?> = createField(DSL.name("IS_VISIBLE"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>information_schema.STATISTICS.EXPRESSION</code>.
     */
    val EXPRESSION: TableField<StatisticsRecord, String?> = createField(DSL.name("EXPRESSION"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<StatisticsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StatisticsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.STATISTICS</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.STATISTICS</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.STATISTICS</code> table reference
     */
    constructor(): this(DSL.name("STATISTICS"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StatisticsRecord>): this(Internal.createPathAlias(child, key), child, key, STATISTICS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Statistics = Statistics(DSL.name(alias), this)
    override fun `as`(alias: Name): Statistics = Statistics(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Statistics = Statistics(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Statistics = Statistics(name, null)

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row18<String?, String?, String?, Int?, String?, String?, UInteger?, String?, String?, Long?, Long?, ByteArray?, String?, String?, String?, String?, String?, String?>
}
